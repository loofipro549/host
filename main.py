import os
import re
import json
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

TOKEN = "8224640828:AAGOIewXNEk4G1vEcitZisdGNsicLSlXwuE"
DATA_FILE = "bot_data.json"

if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        DATA = json.load(f)
else:
    DATA = {"users": {}, "deals": {}}
ADMIN_IDS = DATA.get("admins", [1802110243, 5142424997]) # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å

def save_admins():
    DATA["admins"] = ADMIN_IDS
    save_data()

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(DATA, f, ensure_ascii=False, indent=2)
def get_lil_photo_path():
    folder = "lil"
    if not os.path.isdir(folder):
        return None
    for fn in os.listdir(folder):
        if fn.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
            return os.path.join(folder, fn)
    return None

PHOTO_PATH = get_lil_photo_path()


async def send_photo_with_caption(chat_id, caption, reply_markup=None):
    """Send photo (from lil) with caption. If photo missing, send text instead."""
    if PHOTO_PATH and os.path.exists(PHOTO_PATH):
        with open(PHOTO_PATH, "rb") as photo:
            return await bot.send_photo(
                chat_id,
                photo=photo,
                caption=caption,
                reply_markup=reply_markup
            )
    else:
        return await bot.send_message(
            chat_id,
            caption,
            reply_markup=reply_markup
        )

def main_menu_kb(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("ü™ô –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", callback_data="wallets"),
        InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal"),
    )
    kb.add(
        InlineKeyboardButton("üìé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral"),
        InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="lang"),
    )
    kb.add(InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://forms.gle/4kN2r57SJiPrxBjf9"))
    return kb


def wallets_kb(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üí≥ –°–±–µ—Ä–±–∞–Ω–∫", callback_data="pay_sber"),
        InlineKeyboardButton("üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="pay_tink"),
        InlineKeyboardButton("üí≥ –î—Ä—É–≥–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay_other"),
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")
    )
    return kb


def back_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
    return kb


def ton_back_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data="wallets"))
    return kb

def is_valid_ton(addr: str) -> bool:
    addr = addr.strip()
    return (addr.startswith("EQ") or addr.startswith("UQ")) and len(addr) >= 10


def is_valid_sbp(phone: str) -> bool:
    return bool(re.match(r'^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$', phone.strip()))


def is_valid_card(card: str) -> bool:
    digits = re.sub(r"\D", "", card)
    return digits.isdigit() and len(digits) == 16
USER_STATE = {}


def set_state(user_id, state):
    USER_STATE[str(user_id)] = state


def get_state(user_id):
    return USER_STATE.get(str(user_id))


def clear_state(user_id):
    USER_STATE.pop(str(user_id), None)

def ensure_user(user: types.User):
    uid = str(user.id)
    if uid not in DATA["users"]:
        DATA["users"][uid] = {
            "id": user.id,
            "username": user.username or f"{user.first_name}",
            "wallets": {},
            "language": "ru",
            "balance": 0.0,
            "referrals": 0
        }
        save_data()
    return DATA["users"][uid]

def gen_deal_id(n=10):
    return "d" + ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(n))
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    args = message.get_args() or ""
    user = ensure_user(message.from_user)
    if args.startswith("ref=") or args.startswith("ref"):
        ref = args.split("=", 1)[1] if "=" in args else args[3:]
        try:
            ref_id = str(int(ref))
            if ref_id != str(user["id"]):
                if user.get("balance", 0) == 0 and user.get("referrals", 0) == 0:
                    user["balance"] = user.get("balance", 0) + 1.0
                    DATA["users"].setdefault(ref_id, {}).setdefault("referrals", 0)
                    if ref_id in DATA["users"]:
                        DATA["users"][ref_id]["referrals"] = DATA["users"][ref_id].get("referrals", 0) + 1
                save_data()
        except Exception:
            pass

    if args.startswith("deal_") or args.startswith("d"):
        deal_id = args
        deal = DATA["deals"].get(deal_id)
        if deal:
            deal['buyer_id'] = str(message.from_user.id)
            deal['buyer_username'] = message.from_user.username or message.from_user.first_name

            deal.setdefault('seller_success', random.randint(3, 160))
            save_data()

            caption = (
                f"<b>üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #{deal_id}</b>\n\n"
                f"<b>üë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å</b> –≤ —Å–¥–µ–ª–∫–µ.\n"
                f"<b>üìå –ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @{deal['seller_username']} ({deal['seller_id']})\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {deal.get('seller_success', 0)}\n\n"
                f"‚Ä¢ <b>–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ:</b> {deal['description']}\n\n"
                f"üè¶ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: {deal['pay_address']}\n\n"
                f"<b>üí∞ –°—É–º–º–∞:</b> {deal['amount']} {deal['currency']}\n\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–º–µ–º–æ): {deal_id}\n\n"
                f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!"
            )
            kb = InlineKeyboardMarkup(row_width=1)
            kb.add(InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Toonkeper", url="https://tonkeeper.com/"))
            kb.add(InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"exitdeal_{deal_id}"))

            if message.from_user.id in ADMIN_IDS:
                kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}"))

            await send_photo_with_caption(message.chat.id, caption, reply_markup=kb)

            try:
                seller_chat = int(deal['seller_id'])
                await send_photo_with_caption(
                    seller_chat,
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{deal['buyer_username']} ({deal['buyer_id']}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ #{deal_id}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {deal.get('seller_success', 0)}\n\n"
                    f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–µ–ª–∏ –¥–∏–∞–ª–æ–≥ —Ä–∞–Ω–µ–µ!\n"
                    f"–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
                )
            except Exception:
                pass

            return

    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥—ë–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>\n\n"
        "<b>üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!</b>\n"
        "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
        "üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
        "üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        "<b>üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>\n"
        "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî https://telegra.ph/Podrobnyj-gajd-po-ispolzovaniyu-GiftElfRobot-04-25\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:\n"
    )
    kb = main_menu_kb(message.from_user.id)
    await send_photo_with_caption(message.chat.id, caption, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "wallets")
async def cb_wallets(callback_query: types.CallbackQuery):
    user = ensure_user(callback_query.from_user)
    cur = user.get("wallets") or {}
    if cur:
        parts = []
        if "type" in cur:
            if cur["type"] == "STARS":
                parts.append("–í—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ –≤ STARS")
            elif cur["type"] == "card":
                num = cur.get("card_number", "")
                country = cur.get("country", "")
                parts.append(f"{num} | {country}_CARD")
            elif cur["type"] == "ton":
                parts.append(f"TON: {cur.get('ton')}" )
            elif cur["type"] == "sbp":
                parts.append(f"–°–ë–ü: {cur.get('sbp')}" )
        caption = f"<b>üíº–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:</b>\n" + "\n".join(parts) + "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:"
    else:
        caption = "<b>üíº–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞ –Ω–∏–∂–µ:"

    kb = wallets_kb(callback_query.from_user.id)
    await send_photo_with_caption(callback_query.from_user.id, caption, reply_markup=kb)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "back_menu")
async def cb_back_menu(c: types.CallbackQuery):
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥—ë–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:\n"
    )
    kb = main_menu_kb(c.from_user.id)
    await send_photo_with_caption(c.from_user.id, caption, reply_markup=kb)
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "add_ton")
async def cb_add_ton(c: types.CallbackQuery):
    await send_photo_with_caption(c.from_user.id, "<b>üíé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TON-–∫–æ—à–µ–ª—å–∫–∞</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à TON –∞–¥—Ä–µ—Å", reply_markup=ton_back_kb())
    set_state(c.from_user.id, "adding_ton")
    await c.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("pay_"))
async def cb_pay_method(c: types.CallbackQuery):
    method = c.data.split("_")[1]
    await send_photo_with_caption(c.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è {method.upper()} (16 —Ü–∏—Ñ—Ä):", reply_markup=back_menu_kb())
    set_state(c.from_user.id, f"adding_card_{method}")
    await c.answer()

@dp.callback_query_handler(lambda c: c.data == "add_sbp")
async def cb_add_sbp(c: types.CallbackQuery):
    await send_photo_with_caption(c.from_user.id, "<b>üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–ë–ü</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>+7(XXX)XXX-XX-XX</b>", reply_markup=back_menu_kb())
    set_state(c.from_user.id, "adding_sbp")
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "add_card_rf")
async def cb_add_card_rf(c: types.CallbackQuery):
    await send_photo_with_caption(c.from_user.id, "<b>üí≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (–†–§)</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>XXXX XXXX XXXX XXXX</b>", reply_markup=back_menu_kb())
    set_state(c.from_user.id, "adding_card_rf")
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "add_card_ua")
async def cb_add_card_ua(c: types.CallbackQuery):
    await send_photo_with_caption(c.from_user.id, "<b>üí≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã (UA)</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>XXXX XXXX XXXX XXXX</b>", reply_markup=back_menu_kb())
    set_state(c.from_user.id, "adding_card_ua")
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "set_stars")
async def cb_set_stars(c: types.CallbackQuery):
    user = ensure_user(c.from_user)
    user["wallets"] = {"type": "STARS"}
    save_data()
    await send_photo_with_caption(c.from_user.id, "<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –≤–∞–ª—é—Ç–∞ —Å–¥–µ–ª–æ–∫ ‚Äî STARS</b>", reply_markup=back_menu_kb())
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "create_deal")
async def cb_create_deal(c: types.CallbackQuery):
    await send_photo_with_caption(c.from_user.id, "<b>üíº–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB –Ω–∞–ø—Ä–∏–º–µ—Ä: 3000", reply_markup=back_menu_kb())
    set_state(c.from_user.id, "deal_amount")
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "referral")
async def cb_referral(c: types.CallbackQuery):
    user = ensure_user(c.from_user)
    uid = user['id']
    link = f"https://t.me/{(await bot.get_me()).username}?start=ref={uid}"
    caption = f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{link}\n\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.get('referrals',0)}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.get('balance',0.0)} RUB\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 20% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
    await send_photo_with_caption(c.from_user.id, caption, reply_markup=kb)
    await c.answer()


@dp.callback_query_handler(lambda c: c.data == "lang")
async def cb_lang(c: types.CallbackQuery):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"), InlineKeyboardButton("English", callback_data="set_lang_en"))
    await send_photo_with_caption(c.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)
    await c.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("exitdeal_"))
async def cb_exit_deal(c: types.CallbackQuery):
    deal_id = c.data.split("_",1)[1]
    deal = DATA["deals"].get(deal_id)
    if deal:
        seller_chat = int(deal['seller_id'])
        try:
            await send_photo_with_caption(seller_chat, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{c.from_user.username} ({c.from_user.id}) –ø–æ–∫–∏–Ω—É–ª —Å–¥–µ–ª–∫—É #{deal_id}.\n–°–¥–µ–ª–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.")
        except Exception:
            pass
        deal.pop('buyer_id', None)
        save_data()
    await send_photo_with_caption(c.from_user.id, "‚ùå –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏.", reply_markup=back_menu_kb())
    await c.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("exitdealbtn_"))
async def cb_exit_deal_btn(c: types.CallbackQuery):
    await cb_exit_deal(c)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("confirm_payment_"))
async def cb_confirm_payment(c: types.CallbackQuery):
    deal_id = c.data[len("confirm_payment_"):]  # <-- –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    deal = DATA["deals"].get(deal_id)
    if not deal:
        await c.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if c.from_user.id not in ADMIN_IDS:
        await c.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.")
        return
    deal['paid'] = True
    save_data()
    await send_photo_with_caption(
        int(deal['seller_id']),
        f"üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{deal['buyer_username']} ({deal['buyer_id']}) –æ–ø–ª–∞—Ç–∏–ª –≤–∞—à —Ç–æ–≤–∞—Ä.\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ–¥–∞—Ä–æ–∫.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä üíé", callback_data=f"delivered_{deal_id}")
        )
    )
    await c.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("delivered_"))
async def cb_delivered(c: types.CallbackQuery):
    deal_id = c.data.split("_",1)[1]
    deal = DATA["deals"].get(deal_id)
    if not deal:
        await c.answer()
        return
    buyer_id = int(deal.get('buyer_id')) if deal.get('buyer_id') else None
    if buyer_id:
        try:
            await send_photo_with_caption(buyer_id, f"–ü—Ä–æ–¥–∞–≤–µ—Ü @{c.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–µ", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–Ø –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"received_{deal_id}")))
        except Exception:
            pass
    await send_photo_with_caption(c.from_user.id, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=back_menu_kb())
    await c.answer()

@dp.message_handler(commands=["addadmin"])
async def cmd_addadmin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
        return
    new_admin = int(args)
    if new_admin in ADMIN_IDS:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        return
    ADMIN_IDS.append(new_admin)
    save_admins()
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")

@dp.message_handler(commands=["admins"])
async def cmd_admins(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤.")
        return
    admins_list = "\n".join([str(a) for a in ADMIN_IDS])
    await message.reply(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_list}")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("received_"))
async def cb_received(c: types.CallbackQuery):
    deal_id = c.data.split("_",1)[1]
    deal = DATA["deals"].get(deal_id)
    if not deal:
        await c.answer()
        return
    seller = int(deal['seller_id'])
    await send_photo_with_caption(c.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!", reply_markup=back_menu_kb())
    await send_photo_with_caption(seller, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=back_menu_kb())
    deal['completed'] = True
    deal['seller_success'] = deal.get('seller_success',0) + 1
    save_data()
    await c.answer()
@dp.message_handler()
async def handle_messages(message: types.Message):
    user = ensure_user(message.from_user)
    state = get_state(message.from_user.id)

    if state == "adding_ton":
        addr = message.text.strip()
        if not is_valid_ton(addr):
            await send_photo_with_caption(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TON-–∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–∏–º–µ—Ä: EQCzD2l...", reply_markup=ton_back_kb())
            return
        user['wallets'] = {"type": "ton", "ton": addr}
        save_data()
        clear_state(message.from_user.id)
        await send_photo_with_caption(message.chat.id, "<b>‚úÖ TON-–∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", reply_markup=back_menu_kb())
        return

    if state == "adding_sbp":
        phone = message.text.strip()
        if not is_valid_sbp(phone):
            await send_photo_with_caption(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–ë–ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=back_menu_kb())
            return
        user['wallets'] = {"type": "sbp", "sbp": phone}
        save_data()
        clear_state(message.from_user.id)
        await send_photo_with_caption(message.chat.id, "<b>‚úÖ –°–ë–ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", reply_markup=back_menu_kb())
        return

    if state in ("adding_card_rf", "adding_card_ua"):
        card = message.text.strip()
        if not is_valid_card(card):
            await send_photo_with_caption(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.", reply_markup=back_menu_kb())
            return
        digits = re.sub(r"\D", "", card)
        if state == "adding_card_rf":
            user['wallets'] = {"type": "card", "card_number": digits, "country": "RF"}
            save_data()
            await send_photo_with_caption(message.chat.id, "üè¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –±–∞–Ω–∫!", reply_markup=back_menu_kb())
            set_state(message.from_user.id, "adding_card_rf_bank")
            return
        else:
            user['wallets'] = {"type": "card", "card_number": digits, "country": "UA"}
            save_data()
            clear_state(message.from_user.id)
            await send_photo_with_caption(message.chat.id, "<b>‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω!</b>", reply_markup=back_menu_kb())
            return

    if state.startswith("adding_card_"):
        digits = re.sub(r"\D", "", message.text)
        if len(digits) != 16:
            await send_photo_with_caption(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä.", reply_markup=back_menu_kb())
            return
        method = state.split("_")[-1]
        user['wallets'] = {
            "type": "card",
            "method": method,
            "card_number": digits
        }
        save_data()
        clear_state(message.from_user.id)
        await send_photo_with_caption(message.chat.id, f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {method.upper()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=back_menu_kb())

    if state == "adding_card_rf_bank":
        bank = message.text.strip()
        user['wallets']['bank'] = bank
        save_data()
        clear_state(message.from_user.id)
        await send_photo_with_caption(message.chat.id, "<b>‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω!</b>", reply_markup=back_menu_kb())
        return
    if state == "deal_amount":
        text = message.text.strip()
        if not text.isdigit():
            await send_photo_with_caption(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3000", reply_markup=back_menu_kb())
            return
        USER_STATE[f"{message.from_user.id}_deal_amount"] = text
        set_state(message.from_user.id, "deal_description")
        await send_photo_with_caption(message.chat.id, "<b>üìù–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ:</b>\n\n–ü—Ä–∏–º–µ—Ä: 10 –ö–µ–ø–æ–∫ –∏ –ü–µ–ø–µ...", reply_markup=back_menu_kb())
        return

    if state == "deal_description":
        desc = message.text.strip()
        amount = USER_STATE.pop(f"{message.from_user.id}_deal_amount", "0")
        deal_id = gen_deal_id()
        DATA['deals'][deal_id] = {
               'id': deal_id,
               'seller_id': str(message.from_user.id),
               'seller_username': message.from_user.username or message.from_user.first_name,
               'amount': amount,
               'currency': 'RUB',  # –≤–º–µ—Å—Ç–æ 'STARS'
               'description': desc,
               'pay_address': '',  # –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
               'seller_success': random.randint(10, 160)
        }
        save_data()
        caption = (f"<b>‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                   f"<b>üí∞–°—É–º–º–∞:</b> {amount} {DATA['deals'][deal_id]['currency']}\n"
                   f"<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
                   f"<b>üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> https://t.me/{(await bot.get_me()).username}?start={deal_id}")
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"cancel_{deal_id}"), InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu"))
        await send_photo_with_caption(message.chat.id, caption, reply_markup=kb)
        clear_state(message.from_user.id)
        return
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥—ë–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:\n"
    )
    kb = main_menu_kb(message.from_user.id)
    await send_photo_with_caption(message.chat.id, caption, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("cancel_"))
async def cb_cancel(c: types.CallbackQuery):
    deal_id = c.data.split("_",1)[1]
    if deal_id in DATA['deals']:
        DATA['deals'].pop(deal_id)
        save_data()
    await send_photo_with_caption(c.from_user.id, "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=back_menu_kb())
    await c.answer()
if __name__ == '__main__':
    print("Bot starting...")
    if not PHOTO_PATH:
        print("Warning: no photo found in 'lil/' folder. All messages will fall back to text.")
    executor.start_polling(dp, skip_updates=True)
